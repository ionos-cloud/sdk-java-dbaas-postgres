openapi: 3.0.3
info:
  description: |
    An enterprise-grade Database is provided as a Service (DBaaS) solution that
    can be managed through a browser-based "Data Center Designer" (DCD) tool or
    via an easy to use API.

    The API allows you to create additional database clusters or modify existing
    ones. It is designed to allow users to leverage the same power and
    flexibility found within the DCD visual tool. Both tools are consistent with
    their concepts and lend well to making the experience smooth and intuitive.
  title: IONOS DBaaS REST API
  version: 0.1.0
servers:
- description: Production
  url: https://api.ionos.com/databases/postgresql
security:
- basicAuth: []
- tokenAuth: []
tags:
- description: everything about PostgreSQL clusters
  name: Clusters
- description: everything about PostgreSQL backups
  name: Backups
- description: everything about PostgreSQL restores
  name: Restores
- description: everything about PostgreSQL logs
  name: Logs
- description: all metadata about the API, like versions
  name: Metadata
paths:
  /clusters:
    get:
      description: Retrieves a list of PostgreSQL clusters.
      operationId: clustersGet
      parameters:
      - description: |
          Response filter to list only the PostgreSQL clusters that contain
          the specified name. The value is case insensitive and matched on the
          'displayName' field.
        explode: true
        in: query
        name: filter.name
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterList'
          description: successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type,
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: application/problem+json
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: List clusters
      tags:
      - Clusters
      x-accepts: application/json
    post:
      description: |
        Creates a new PostgreSQL cluster.
        If the `fromBackup` field is populated, the new cluster will be created
        based on the given backup.
      operationId: clustersPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClusterRequest'
        description: The cluster to be created.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterResponse'
          description: |
            The created cluster is returned with `metadata.state` set to "BUSY".
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type,
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: application/problem+json
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: Create a cluster
      tags:
      - Clusters
      x-contentType: application/json
      x-accepts: application/json
  /clusters/{clusterId}:
    delete:
      description: Delete a PostgreSQL cluster.
      operationId: clustersDelete
      parameters:
      - description: The unique ID of the cluster.
        explode: false
        in: path
        name: clusterId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterResponse'
          description: |
            The deleted cluster with `metadata.state` set to "DESTROYING".
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type,
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: application/problem+json
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: Delete a cluster
      tags:
      - Clusters
      x-accepts: application/json
    get:
      description: |
        You can retrieve a PostgreSQL cluster by using its ID. This value can be
        found in the response body when a PostgreSQL cluster is created or when
        you GET a list of PostgreSQL clusters.
      operationId: clustersFindById
      parameters:
      - description: The unique ID of the cluster.
        explode: false
        in: path
        name: clusterId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterResponse'
          description: successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type,
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: application/problem+json
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: Fetch a cluster
      tags:
      - Clusters
      x-accepts: application/json
    patch:
      description: Patch attributes of a PostgreSQL cluster.
      operationId: clustersPatch
      parameters:
      - description: The unique ID of the cluster.
        explode: false
        in: path
        name: clusterId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchClusterRequest'
        description: The modified cluster.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterResponse'
          description: successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type,
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: application/problem+json
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: Patch a cluster
      tags:
      - Clusters
      x-contentType: application/json
      x-accepts: application/json
  /clusters/backups:
    get:
      description: Retrieves a list of all PostgreSQL cluster backups.
      operationId: clustersBackupsGet
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterBackupList'
          description: successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type,
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: application/problem+json
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: List cluster backups
      tags:
      - Backups
      x-accepts: application/json
  /clusters/backups/{backupId}:
    get:
      description: |
        Retrieve a PostgreSQL cluster backup by using its ID. This value can be
        found when you GET a list of PostgreSQL cluster backups.
      operationId: clustersBackupsFindById
      parameters:
      - description: The unique ID of the backup.
        explode: false
        in: path
        name: backupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupResponse'
          description: successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type,
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: application/problem+json
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: Fetch a cluster backup
      tags:
      - Backups
      x-accepts: application/json
  /clusters/{clusterId}/backups:
    get:
      description: Retrieves a list of all backups of the given PostgreSQL cluster.
      operationId: clusterBackupsGet
      parameters:
      - description: The unique ID of the cluster.
        explode: false
        in: path
        name: clusterId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterBackupList'
          description: successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type,
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: application/problem+json
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: List backups of cluster
      tags:
      - Backups
      x-accepts: application/json
  /clusters/{clusterId}/restore:
    post:
      description: Triggers an in-place restore of the given PostgreSQL.
      operationId: clusterRestorePost
      parameters:
      - description: The unique ID of the cluster.
        explode: false
        in: path
        name: clusterId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRestoreRequest'
        description: The restore request to create.
        required: true
      responses:
        "202":
          description: successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type,
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: application/problem+json
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: In-place restore of a cluster
      tags:
      - Restores
      x-contentType: application/json
      x-accepts: application/json
  /clusters/{clusterId}/logs:
    get:
      description: Retrieves PostgreSQL logs based on the given parameters.
      operationId: clusterLogsGet
      parameters:
      - description: The unique ID of the cluster.
        explode: false
        in: path
        name: clusterId
        required: true
        schema:
          type: string
        style: simple
      - description: The maximal number of log lines to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          $ref: '#/components/schemas/LimitQuery'
        style: form
      - description: The start time for the query in RFC3339 format.
        explode: true
        in: query
        name: start
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The end time for the query in RFC3339 format.
        explode: true
        in: query
        name: end
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterLogs'
          description: successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type,
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: application/problem+json
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: Get logs of your cluster
      tags:
      - Logs
      x-accepts: application/json
  /clusters/postgresversions:
    get:
      description: Retrieves a list of all available PostgreSQL versions.
      operationId: postgresVersionsGet
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresVersionList'
          description: successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type,
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: application/problem+json
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: List PostgreSQL versions
      tags:
      - Clusters
      x-accepts: application/json
  /clusters/{clusterId}/postgresversions:
    get:
      description: |
        Retrieves a list of all PostgreSQL versions available for this cluster
        including the current version.
      operationId: clusterPostgresVersionsGet
      parameters:
      - description: The unique ID of the cluster.
        explode: false
        in: path
        name: clusterId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostgresVersionList'
          description: successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type,
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: application/problem+json
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: List PostgreSQL versions
      tags:
      - Clusters
      x-accepts: application/json
  /infos/version:
    get:
      description: Retrieves the current version of the responding API.
      operationId: infosVersionGet
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIVersion'
          description: successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type,
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: application/problem+json
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: Get the current API version
      tags:
      - Metadata
      x-accepts: application/json
  /infos/versions:
    get:
      description: Retrieves all available versions of the responding API.
      operationId: infosVersionsGet
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/APIVersion'
                type: array
          description: successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |
            Any erroneous status code: 400 (parse error), 401 (auth error),
            402 (trial access), 403 (insufficient permissions), 404 (not found),
            405 (unsupported HTTP method), 415 (unsupported content type,
            422 (validation error), 429 (request rate limit exceeded),
            500 (server error), 503 (maintenance)
          headers:
            Content-Type:
              description: application/problem+json
              explode: false
              schema:
                default: application/problem+json
                type: string
              style: simple
      security:
      - basicAuth: []
      - tokenAuth: []
      summary: Fetch all API versions
      tags:
      - Metadata
      x-accepts: application/json
components:
  parameters:
    ClusterNameQuery:
      description: |
        Response filter to list only the PostgreSQL clusters that contain
        the specified name. The value is case insensitive and matched on the
        'displayName' field.
      explode: true
      in: query
      name: filter.name
      required: false
      schema:
        type: string
      style: form
    ClusterIdPath:
      description: The unique ID of the cluster.
      explode: false
      in: path
      name: clusterId
      required: true
      schema:
        type: string
      style: simple
    BackupIdPath:
      description: The unique ID of the backup.
      explode: false
      in: path
      name: backupId
      required: true
      schema:
        type: string
      style: simple
    LimitQuery:
      description: The maximal number of log lines to return.
      explode: true
      in: query
      name: limit
      required: false
      schema:
        $ref: '#/components/schemas/LimitQuery'
      style: form
    StartQuery:
      description: The start time for the query in RFC3339 format.
      explode: true
      in: query
      name: start
      required: false
      schema:
        format: date-time
        type: string
      style: form
    EndQuery:
      description: The end time for the query in RFC3339 format.
      explode: true
      in: query
      name: end
      required: false
      schema:
        format: date-time
        type: string
      style: form
  responses:
    ApiError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: |
        Any erroneous status code: 400 (parse error), 401 (auth error),
        402 (trial access), 403 (insufficient permissions), 404 (not found),
        405 (unsupported HTTP method), 415 (unsupported content type,
        422 (validation error), 429 (request rate limit exceeded),
        500 (server error), 503 (maintenance)
      headers:
        Content-Type:
          description: application/problem+json
          explode: false
          schema:
            default: application/problem+json
            type: string
          style: simple
  schemas:
    ErrorResponse:
      properties:
        httpStatus:
          description: HTTP status code of the operation
          example: 400
          type: integer
        messages:
          items:
            $ref: '#/components/schemas/ErrorMessage'
          type: array
      type: object
    ErrorMessage:
      properties:
        errorCode:
          description: |
            Application internal error code
          example: dbaas-err-api-123
          type: string
        message:
          description: |
            A human readable explanation specific to this occurrence of the
            problem.
          example: Error message example
          type: string
      type: object
    ResourceType:
      description: The type of the resource.
      enum:
      - collection
      - cluster
      - backup
      type: string
    ResourceId:
      description: The unique ID of the resource.
      example: 498ae72f-411f-11eb-9d07-046c59cc737e
      type: string
    PostgresVersion:
      description: The PostgreSQL version of your cluster.
      example: "13"
      type: string
    Instances:
      description: |
        The total number of instances in the cluster (one master and n-1
        standbys).
      example: 2
      maximum: 5
      minimum: 1
      type: integer
    LimitQuery:
      description: The maximal number of log lines to return.
      example: 10
      maximum: 5000
      minimum: 1
      type: integer
    Cores:
      description: The number of CPU cores per instance.
      example: 4
      minimum: 1
      type: integer
    Ram:
      description: The amount of memory per instance in megabytes. Has to be a multiple
        of 1024.
      example: 2048
      minimum: 2048
      multipleOf: 1024
      type: integer
    StorageSize:
      description: The amount of storage per instance in megabytes.
      example: 5000
      maximum: 2097152
      minimum: 2048
      type: integer
    Location:
      description: |
        The physical location where the cluster will be created. This will be
        where all of your instances live. Property cannot be modified after
        datacenter creation.
      enum:
      - de/fra
      - de/txl
      - gb/lhr
      - es/vit
      - us/ewr
      - us/las
      example: de/fra
      type: string
    DisplayName:
      description: The friendly name of your cluster.
      example: PostgreSQL cluster
      type: string
    CreateClusterRequest:
      description: |
        Request payload with all data needed to create a new PostgreSQL cluster.
      example:
        metadata:
          createdByUserId: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
          createdDate: 2020-12-10T13:37:50+01:00
          createdBy: john.doe@example.com
          lastModifiedDate: 2020-12-11T13:37:50+01:00
          lastModifiedBy: jane.doe@example.com
          state: AVAILABLE
          lastModifiedByUserId: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
        properties:
          instances: 2
          credentials:
            password: password
            username: db-admin
          displayName: PostgreSQL cluster
          fromBackup:
            backupId: dcd31531-3ac8-11eb-9feb-046c59cc737e
            recoveryTargetTime: 2020-12-10T13:37:50+01:00
          postgresVersion: "13"
          maintenanceWindow:
            dayOfTheWeek: Monday
            time: 16:30:59
          cores: 4
          storageSize: 5000
          storageType: HDD
          location: de/fra
          synchronizationMode: ASYNCHRONOUS
          connections:
          - datacenterId: 5a029f4a-72e5-11ec-90d6-0242ac120003
            cidr: 192.168.1.100/24
            lanId: "2"
          ram: 2048
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        properties:
          $ref: '#/components/schemas/CreateClusterProperties'
      type: object
    CreateClusterProperties:
      description: |
        Properties with all data needed to create a new PostgreSQL cluster.
      example:
        instances: 2
        credentials:
          password: password
          username: db-admin
        displayName: PostgreSQL cluster
        fromBackup:
          backupId: dcd31531-3ac8-11eb-9feb-046c59cc737e
          recoveryTargetTime: 2020-12-10T13:37:50+01:00
        postgresVersion: "13"
        maintenanceWindow:
          dayOfTheWeek: Monday
          time: 16:30:59
        cores: 4
        storageSize: 5000
        storageType: HDD
        location: de/fra
        synchronizationMode: ASYNCHRONOUS
        connections:
        - datacenterId: 5a029f4a-72e5-11ec-90d6-0242ac120003
          cidr: 192.168.1.100/24
          lanId: "2"
        ram: 2048
      properties:
        postgresVersion:
          description: The PostgreSQL version of your cluster.
          example: "13"
          type: string
        instances:
          description: |
            The total number of instances in the cluster (one master and n-1
            standbys).
          example: 2
          maximum: 5
          minimum: 1
          type: integer
        cores:
          description: The number of CPU cores per instance.
          example: 4
          minimum: 1
          type: integer
        ram:
          description: The amount of memory per instance in megabytes. Has to be a
            multiple of 1024.
          example: 2048
          minimum: 2048
          multipleOf: 1024
          type: integer
        storageSize:
          description: The amount of storage per instance in megabytes.
          example: 5000
          maximum: 2097152
          minimum: 2048
          type: integer
        storageType:
          $ref: '#/components/schemas/StorageType'
        connections:
          items:
            $ref: '#/components/schemas/Connection'
          maxItems: 1
          minItems: 1
          type: array
        location:
          $ref: '#/components/schemas/Location'
        displayName:
          description: The friendly name of your cluster.
          example: PostgreSQL cluster
          type: string
        maintenanceWindow:
          $ref: '#/components/schemas/MaintenanceWindow'
        credentials:
          $ref: '#/components/schemas/DBUser'
        synchronizationMode:
          $ref: '#/components/schemas/SynchronizationMode'
        fromBackup:
          $ref: '#/components/schemas/CreateRestoreRequest'
      required:
      - connections
      - cores
      - credentials
      - displayName
      - instances
      - location
      - postgresVersion
      - ram
      - storageSize
      - storageType
      - synchronizationMode
      type: object
    PatchClusterRequest:
      description: Request payload to change a cluster
      example:
        metadata:
          createdByUserId: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
          createdDate: 2020-12-10T13:37:50+01:00
          createdBy: john.doe@example.com
          lastModifiedDate: 2020-12-11T13:37:50+01:00
          lastModifiedBy: jane.doe@example.com
          state: AVAILABLE
          lastModifiedByUserId: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
        properties:
          maintenanceWindow:
            dayOfTheWeek: Monday
            time: 16:30:59
          cores: 4
          instances: 2
          displayName: PostgreSQL cluster
          storageSize: 5000
          connections:
          - datacenterId: 5a029f4a-72e5-11ec-90d6-0242ac120003
            cidr: 192.168.1.100/24
            lanId: "2"
          ram: 2048
          postgresVersion: "13"
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        properties:
          $ref: '#/components/schemas/PatchClusterProperties'
      type: object
    PatchClusterProperties:
      description: Properties of the payload to change a cluster
      example:
        maintenanceWindow:
          dayOfTheWeek: Monday
          time: 16:30:59
        cores: 4
        instances: 2
        displayName: PostgreSQL cluster
        storageSize: 5000
        connections:
        - datacenterId: 5a029f4a-72e5-11ec-90d6-0242ac120003
          cidr: 192.168.1.100/24
          lanId: "2"
        ram: 2048
        postgresVersion: "13"
      properties:
        cores:
          description: The number of CPU cores per instance.
          example: 4
          minimum: 1
          type: integer
        ram:
          description: The amount of memory per instance in megabytes. Has to be a
            multiple of 1024.
          example: 2048
          minimum: 2048
          multipleOf: 1024
          type: integer
        storageSize:
          description: The amount of storage per instance in megabytes.
          example: 5000
          maximum: 2097152
          minimum: 2048
          type: integer
        connections:
          items:
            $ref: '#/components/schemas/Connection'
          maxItems: 1
          minItems: 0
          type: array
        displayName:
          description: The friendly name of your cluster.
          example: PostgreSQL cluster
          type: string
        maintenanceWindow:
          $ref: '#/components/schemas/MaintenanceWindow'
        postgresVersion:
          description: The PostgreSQL version of your cluster.
          example: "13"
          type: string
        instances:
          description: |
            The total number of instances in the cluster (one master and n-1
            standbys).
          example: 2
          maximum: 5
          minimum: 1
          type: integer
      type: object
    CreateRestoreRequest:
      description: The restore request.
      example:
        backupId: dcd31531-3ac8-11eb-9feb-046c59cc737e
        recoveryTargetTime: 2020-12-10T13:37:50+01:00
      properties:
        backupId:
          description: The unique ID of the backup you want to restore.
          example: dcd31531-3ac8-11eb-9feb-046c59cc737e
          type: string
        recoveryTargetTime:
          description: |
            If this value is supplied as ISO 8601 timestamp, the backup will be
            replayed up until the given timestamp. If empty, the backup will be
            applied completely.
          example: 2020-12-10T13:37:50+01:00
          format: date-time
          type: string
      required:
      - backupId
      type: object
    DBUser:
      description: Credentials for the database user to be created.
      example:
        password: password
        username: db-admin
      properties:
        username:
          description: |
            The username for the initial postgres user. some system usernames
            are restricted (e.g. "postgres", "admin", "standby").
          example: db-admin
          type: string
        password:
          example: password
          type: string
      required:
      - password
      - username
      type: object
    Connection:
      description: Details about the network connection for your cluster.
      example:
        datacenterId: 5a029f4a-72e5-11ec-90d6-0242ac120003
        cidr: 192.168.1.100/24
        lanId: "2"
      properties:
        datacenterId:
          description: The datacenter to connect your cluster to.
          example: 5a029f4a-72e5-11ec-90d6-0242ac120003
          type: string
        lanId:
          description: The numeric LAN ID to connect your cluster to.
          example: "2"
          type: string
        cidr:
          description: |
            The IP and subnet for your cluster.
            Note the following unavailable IP ranges:
            10.233.64.0/18
            10.233.0.0/18
            10.233.114.0/24
          example: 192.168.1.100/24
          type: string
      required:
      - cidr
      - datacenterId
      - lanId
      type: object
    Metadata:
      description: Metadata of the resource
      example:
        createdByUserId: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
        createdDate: 2020-12-10T13:37:50+01:00
        createdBy: john.doe@example.com
        lastModifiedDate: 2020-12-11T13:37:50+01:00
        lastModifiedBy: jane.doe@example.com
        state: AVAILABLE
        lastModifiedByUserId: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
      properties:
        createdDate:
          description: The ISO 8601 creation timestamp.
          example: 2020-12-10T13:37:50+01:00
          format: date-time
          type: string
        createdBy:
          example: john.doe@example.com
          type: string
        createdByUserId:
          example: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
          type: string
        lastModifiedDate:
          description: The ISO 8601 modified timestamp.
          example: 2020-12-11T13:37:50+01:00
          format: date-time
          type: string
        lastModifiedBy:
          example: jane.doe@example.com
          type: string
        lastModifiedByUserId:
          example: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
          type: string
        state:
          $ref: '#/components/schemas/State'
    State:
      description: The current status reported back by the cluster.
      enum:
      - AVAILABLE
      - BUSY
      - DESTROYING
      - FAILED
      - UNKNOWN
      example: AVAILABLE
      type: string
    BackupMetadata:
      description: Metadata of the backup resource.
      example:
        createdDate: 2020-12-10T13:37:50+01:00
        state: AVAILABLE
      properties:
        createdDate:
          description: The ISO 8601 creation timestamp.
          example: 2020-12-10T13:37:50+01:00
          format: date-time
          type: string
        state:
          $ref: '#/components/schemas/State'
      type: object
    ClusterResponse:
      description: A database cluster
      example:
        metadata:
          createdByUserId: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
          createdDate: 2020-12-10T13:37:50+01:00
          createdBy: john.doe@example.com
          lastModifiedDate: 2020-12-11T13:37:50+01:00
          lastModifiedBy: jane.doe@example.com
          state: AVAILABLE
          lastModifiedByUserId: 87f9a82e-b28d-49ed-9d04-fba2c0459cd3
        id: 498ae72f-411f-11eb-9d07-046c59cc737e
        properties:
          maintenanceWindow:
            dayOfTheWeek: Monday
            time: 16:30:59
          cores: 4
          instances: 2
          displayName: PostgreSQL cluster
          backupLocation: de
          storageSize: 5000
          storageType: HDD
          location: de/fra
          synchronizationMode: ASYNCHRONOUS
          connections:
          - datacenterId: 5a029f4a-72e5-11ec-90d6-0242ac120003
            cidr: 192.168.1.100/24
            lanId: "2"
          postgresVersion: "13"
          ram: 2048
      properties:
        type:
          $ref: '#/components/schemas/ResourceType'
        id:
          description: The unique ID of the resource.
          example: 498ae72f-411f-11eb-9d07-046c59cc737e
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
        properties:
          $ref: '#/components/schemas/ClusterProperties'
      type: object
    ClusterProperties:
      description: Properties of a database cluster
      example:
        maintenanceWindow:
          dayOfTheWeek: Monday
          time: 16:30:59
        cores: 4
        instances: 2
        displayName: PostgreSQL cluster
        backupLocation: de
        storageSize: 5000
        storageType: HDD
        location: de/fra
        synchronizationMode: ASYNCHRONOUS
        connections:
        - datacenterId: 5a029f4a-72e5-11ec-90d6-0242ac120003
          cidr: 192.168.1.100/24
          lanId: "2"
        postgresVersion: "13"
        ram: 2048
      properties:
        displayName:
          description: The friendly name of your cluster.
          example: PostgreSQL cluster
          type: string
        postgresVersion:
          description: The PostgreSQL version of your cluster.
          example: "13"
          type: string
        location:
          $ref: '#/components/schemas/Location'
        backupLocation:
          $ref: '#/components/schemas/BackupLocation'
        instances:
          description: |
            The total number of instances in the cluster (one master and n-1
            standbys).
          example: 2
          maximum: 5
          minimum: 1
          type: integer
        ram:
          description: The amount of memory per instance in megabytes. Has to be a
            multiple of 1024.
          example: 2048
          minimum: 2048
          multipleOf: 1024
          type: integer
        cores:
          description: The number of CPU cores per instance.
          example: 4
          minimum: 1
          type: integer
        storageSize:
          description: The amount of storage per instance in megabytes.
          example: 5000
          maximum: 2097152
          minimum: 2048
          type: integer
        storageType:
          $ref: '#/components/schemas/StorageType'
        connections:
          items:
            $ref: '#/components/schemas/Connection'
          maxItems: 1
          minItems: 1
          type: array
        maintenanceWindow:
          $ref: '#/components/schemas/MaintenanceWindow'
        synchronizationMode:
          $ref: '#/components/schemas/SynchronizationMode'
      type: object
    BackupResponse:
      description: A database backup
      example:
        metadata:
          createdDate: 2020-12-10T13:37:50+01:00
          state: AVAILABLE
        id: 498ae72f-411f-11eb-9d07-046c59cc737e
        properties:
          earliestRecoveryTargetTime: 2021-10-23T01:21:10Z
          id: 498ae72f-411f-11eb-9d07-046c59cc737e
          clusterId: 498ae72f-411f-11eb-9d07-046c59cc737e
          isActive: true
          version: "12"
      properties:
        type:
          $ref: '#/components/schemas/ResourceType'
        id:
          description: The unique ID of the resource.
          example: 498ae72f-411f-11eb-9d07-046c59cc737e
          type: string
        metadata:
          $ref: '#/components/schemas/BackupMetadata'
        properties:
          $ref: '#/components/schemas/ClusterBackup'
      type: object
    ClusterBackup:
      description: a backup object
      example:
        earliestRecoveryTargetTime: 2021-10-23T01:21:10Z
        id: 498ae72f-411f-11eb-9d07-046c59cc737e
        clusterId: 498ae72f-411f-11eb-9d07-046c59cc737e
        isActive: true
        version: "12"
      properties:
        id:
          description: The unique ID of the resource.
          example: 498ae72f-411f-11eb-9d07-046c59cc737e
          type: string
        clusterId:
          description: The unique ID of the cluster.
          example: 498ae72f-411f-11eb-9d07-046c59cc737e
          type: string
        version:
          description: The PostgreSQL version this backup was created from.
          example: "12"
          type: string
        isActive:
          description: Whether a cluster currently backs up data to this backup.
          example: true
          type: boolean
        earliestRecoveryTargetTime:
          description: The oldest available timestamp to which you can restore.
          example: 2021-10-23T01:21:10Z
          format: date-time
          type: string
      type: object
    BackupLocation:
      description: The S3 location where the backups will be stored.
      enum:
      - de
      - eu-south-2
      - eu-central-2
      example: de
      type: string
    MaintenanceWindow:
      description: |
        A weekly 4 hour-long window, during which maintenance might occur
      example:
        dayOfTheWeek: Monday
        time: 16:30:59
      properties:
        time:
          example: 16:30:59
          type: string
        dayOfTheWeek:
          $ref: '#/components/schemas/DayOfTheWeek'
      required:
      - dayOfTheWeek
      - time
      type: object
    DayOfTheWeek:
      description: The name of the week day.
      enum:
      - Sunday
      - Monday
      - Tuesday
      - Wednesday
      - Thursday
      - Friday
      - Saturday
      example: Monday
      type: string
    APIVersion:
      example:
        name: v2.1
        swaggerUrl: https://api.ionos.com/databases/postgres/infos/assets/swagger-v2.1.yml
      properties:
        name:
          example: v2.1
          type: string
        swaggerUrl:
          example: https://api.ionos.com/databases/postgres/infos/assets/swagger-v2.1.yml
          type: string
      type: object
    StorageType:
      description: The storage type used in your cluster.
      enum:
      - HDD
      - SSD
      example: HDD
      type: string
    Pagination:
      properties:
        offset:
          description: |
            The offset specified in the request (if none was specified, the default
            offset is 0) (not implemented yet).
          example: 0
          minimum: 0
          readOnly: true
          type: integer
        limit:
          description: |
            The limit specified in the request (if none was specified, use the
            endpoint's default pagination limit) (not implemented yet, always return
            number of items).
          example: 42
          minimum: 0
          readOnly: true
          type: integer
        _links:
          $ref: '#/components/schemas/PaginationLinks'
      type: object
    PaginationOffset:
      description: |
        The offset specified in the request (if none was specified, the default
        offset is 0) (not implemented yet).
      example: 0
      minimum: 0
      readOnly: true
      type: integer
    PaginationLimit:
      description: |
        The limit specified in the request (if none was specified, use the
        endpoint's default pagination limit) (not implemented yet, always return
        number of items).
      example: 42
      minimum: 0
      readOnly: true
      type: integer
    PaginationLinks:
      description: |
        URLs to navigate the different pages. As of now we always only return a
        single page.
      properties:
        prev:
          description: |
            URL (with offset and limit parameters) of the previous page; only
            present if offset is greater than 0.
          example: <PREVIOUS-PAGE-URI>
          format: uri
          readOnly: true
          type: string
        self:
          description: |
            URL (with offset and limit parameters) of the current page.
          example: <THIS-PAGE-URI>
          format: uri
          readOnly: true
          type: string
        next:
          description: |
            URL (with offset and limit parameters) of the next page; only
            present if offset + limit is less than the total number of elements.
          example: <NEXT-PAGE-URI>
          format: uri
          readOnly: true
          type: string
      type: object
    ClusterList:
      allOf:
      - $ref: '#/components/schemas/ClusterList_allOf'
      - $ref: '#/components/schemas/Pagination'
      description: List of clusters
      type: object
    ClusterBackupList:
      allOf:
      - $ref: '#/components/schemas/ClusterBackupList_allOf'
      - $ref: '#/components/schemas/Pagination'
      description: List of backups
    PostgresVersionList:
      description: list of PostgreSQL versions
      example:
        data:
        - name: "12"
        - name: "12"
      properties:
        data:
          items:
            $ref: '#/components/schemas/PostgresVersionList_data'
          type: array
      type: object
    ClusterLogs:
      description: The logs of the PostgreSQL cluster.
      example:
        instances:
        - name: postgres-cluster-0
          messages:
          - time: 2021-09-06T10:00:38.253+02:00
            message: Hello World
          - time: 2021-09-06T10:00:38.253+02:00
            message: Hello World
        - name: postgres-cluster-0
          messages:
          - time: 2021-09-06T10:00:38.253+02:00
            message: Hello World
          - time: 2021-09-06T10:00:38.253+02:00
            message: Hello World
      properties:
        instances:
          items:
            $ref: '#/components/schemas/ClusterLogs_instances'
          type: array
      type: object
    SynchronizationMode:
      description: |
        Represents different modes of replication.
      enum:
      - ASYNCHRONOUS
      - SYNCHRONOUS
      - STRICTLY_SYNCHRONOUS
      example: ASYNCHRONOUS
      type: string
    ClusterList_allOf:
      properties:
        type:
          $ref: '#/components/schemas/ResourceType'
        id:
          description: The unique ID of the resource.
          example: 498ae72f-411f-11eb-9d07-046c59cc737e
          type: string
        items:
          items:
            $ref: '#/components/schemas/ClusterResponse'
          type: array
      type: object
    ClusterBackupList_allOf:
      properties:
        type:
          $ref: '#/components/schemas/ResourceType'
        id:
          description: The unique ID of the resource.
          example: 498ae72f-411f-11eb-9d07-046c59cc737e
          type: string
        items:
          items:
            $ref: '#/components/schemas/BackupResponse'
          type: array
      type: object
    PostgresVersionList_data:
      example:
        name: "12"
      properties:
        name:
          example: "12"
          type: string
      type: object
    ClusterLogs_messages:
      example:
        time: 2021-09-06T10:00:38.253+02:00
        message: Hello World
      properties:
        time:
          example: 2021-09-06T10:00:38.253+02:00
          format: date-time
          type: string
        message:
          example: Hello World
          type: string
      type: object
    ClusterLogs_instances:
      example:
        name: postgres-cluster-0
        messages:
        - time: 2021-09-06T10:00:38.253+02:00
          message: Hello World
        - time: 2021-09-06T10:00:38.253+02:00
          message: Hello World
      properties:
        name:
          description: The name of the PostgreSQL instance.
          example: postgres-cluster-0
          type: string
        messages:
          items:
            $ref: '#/components/schemas/ClusterLogs_messages'
          type: array
      type: object
  securitySchemes:
    basicAuth:
      description: |
        You will need to base64 encode the string containing your credentials.
        Separate your username and password with a colon, i.e.,
        username:password and send it as 'Authorization' request header. More
        details: https://en.wikipedia.org/wiki/Basic_access_authentication.
      scheme: basic
      type: http
    tokenAuth:
      description: |
        Please provide header value as 'Bearer <token>' and don't forget to add
        'Bearer' HTTP Authorization Scheme before the token.
      in: header
      name: Authorization
      type: apiKey

