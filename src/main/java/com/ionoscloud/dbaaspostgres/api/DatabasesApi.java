/*
 * IONOS DBaaS PostgreSQL REST API
 * An enterprise-grade Database is provided as a Service (DBaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.  The API allows you to create additional PostgreSQL database clusters or modify existing ones. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.dbaaspostgres.api;

import com.ionoscloud.dbaaspostgres.ApiCallback;
import com.ionoscloud.dbaaspostgres.ApiClient;
import com.ionoscloud.dbaaspostgres.ApiException;
import com.ionoscloud.dbaaspostgres.ApiResponse;
import com.ionoscloud.dbaaspostgres.Configuration;
import com.ionoscloud.dbaaspostgres.Pair;
import com.ionoscloud.dbaaspostgres.ProgressRequestBody;
import com.ionoscloud.dbaaspostgres.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ionoscloud.dbaaspostgres.model.Database;
import com.ionoscloud.dbaaspostgres.model.DatabaseList;
import com.ionoscloud.dbaaspostgres.model.DatabaseResource;
import com.ionoscloud.dbaaspostgres.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DatabasesApi {
    private ApiClient localVarApiClient;

    public DatabasesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DatabasesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for databasesDelete
     * @param clusterId The unique ID of the cluster. (required)
     * @param databasename The database name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance)  </td><td>  * Content-Type - application/problem+json <br>  </td></tr>
     </table>
     */
    public okhttp3.Call databasesDeleteCall(String clusterId, String databasename, final ApiCallback<Void> _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clusters/{clusterId}/databases/{databasename}"
            .replaceAll("\\{" + "clusterId" + "\\}", localVarApiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "databasename" + "\\}", localVarApiClient.escapeString(databasename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databasesDeleteValidateBeforeCall(String clusterId, String databasename, final ApiCallback<Void> _callback) throws ApiException {
        
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling databasesDelete(Async)");
        }
        
        // verify the required parameter 'databasename' is set
        if (databasename == null) {
            throw new ApiException("Missing the required parameter 'databasename' when calling databasesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = databasesDeleteCall(clusterId, databasename, _callback);
        return localVarCall;

    }

    /**
     * Delete database
     * Deletes a single database
     * @param clusterId The unique ID of the cluster. (required)
     * @param databasename The database name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance)  </td><td>  * Content-Type - application/problem+json <br>  </td></tr>
     </table>
     */
    public void databasesDelete(String clusterId, String databasename) throws ApiException {
        databasesDeleteWithHttpInfo(clusterId, databasename);
    }

    /**
     * Delete database
     * Deletes a single database
     * @param clusterId The unique ID of the cluster. (required)
     * @param databasename The database name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance)  </td><td>  * Content-Type - application/problem+json <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> databasesDeleteWithHttpInfo(String clusterId, String databasename) throws ApiException {
        okhttp3.Call localVarCall = databasesDeleteValidateBeforeCall(clusterId, databasename, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete database (asynchronously)
     * Deletes a single database
     * @param clusterId The unique ID of the cluster. (required)
     * @param databasename The database name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance)  </td><td>  * Content-Type - application/problem+json <br>  </td></tr>
     </table>
     */
    public okhttp3.Call databasesDeleteAsync(String clusterId, String databasename, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = databasesDeleteValidateBeforeCall(clusterId, databasename, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for databasesGet
     * @param clusterId The unique ID of the cluster. (required)
     * @param databasename The database name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance)  </td><td>  * Content-Type - application/problem+json <br>  </td></tr>
     </table>
     */
    public okhttp3.Call databasesGetCall(String clusterId, String databasename, final ApiCallback<DatabaseResource> _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clusters/{clusterId}/databases/{databasename}"
            .replaceAll("\\{" + "clusterId" + "\\}", localVarApiClient.escapeString(clusterId.toString()))
            .replaceAll("\\{" + "databasename" + "\\}", localVarApiClient.escapeString(databasename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databasesGetValidateBeforeCall(String clusterId, String databasename, final ApiCallback<DatabaseResource> _callback) throws ApiException {
        
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling databasesGet(Async)");
        }
        
        // verify the required parameter 'databasename' is set
        if (databasename == null) {
            throw new ApiException("Missing the required parameter 'databasename' when calling databasesGet(Async)");
        }
        

        okhttp3.Call localVarCall = databasesGetCall(clusterId, databasename, _callback);
        return localVarCall;

    }

    /**
     * Get database
     * Retrieves a single database
     * @param clusterId The unique ID of the cluster. (required)
     * @param databasename The database name. (required)
     * @return DatabaseResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance)  </td><td>  * Content-Type - application/problem+json <br>  </td></tr>
     </table>
     */
    public DatabaseResource databasesGet(String clusterId, String databasename) throws ApiException {
        ApiResponse<DatabaseResource> localVarResp = databasesGetWithHttpInfo(clusterId, databasename);
        return localVarResp.getData();
    }

    /**
     * Get database
     * Retrieves a single database
     * @param clusterId The unique ID of the cluster. (required)
     * @param databasename The database name. (required)
     * @return ApiResponse&lt;DatabaseResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance)  </td><td>  * Content-Type - application/problem+json <br>  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseResource> databasesGetWithHttpInfo(String clusterId, String databasename) throws ApiException {
        okhttp3.Call localVarCall = databasesGetValidateBeforeCall(clusterId, databasename, null);
        Type localVarReturnType = new TypeToken<DatabaseResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get database (asynchronously)
     * Retrieves a single database
     * @param clusterId The unique ID of the cluster. (required)
     * @param databasename The database name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance)  </td><td>  * Content-Type - application/problem+json <br>  </td></tr>
     </table>
     */
    public okhttp3.Call databasesGetAsync(String clusterId, String databasename, final ApiCallback<DatabaseResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = databasesGetValidateBeforeCall(clusterId, databasename, _callback);
        Type localVarReturnType = new TypeToken<DatabaseResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databasesList
     * @param clusterId The unique ID of the cluster. (required)
     * @param limit The maximum number of elements to return. Use together with &#39;offset&#39; for pagination. (optional, default to 100)
     * @param offset The first element to return. Use together with &#39;limit&#39; for pagination. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance)  </td><td>  * Content-Type - application/problem+json <br>  </td></tr>
     </table>
     */
    public okhttp3.Call databasesListCall(String clusterId, Integer limit, Integer offset, final ApiCallback<DatabaseList> _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clusters/{clusterId}/databases"
            .replaceAll("\\{" + "clusterId" + "\\}", localVarApiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databasesListValidateBeforeCall(String clusterId, Integer limit, Integer offset, final ApiCallback<DatabaseList> _callback) throws ApiException {
        
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling databasesList(Async)");
        }
        

        okhttp3.Call localVarCall = databasesListCall(clusterId, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * List databases
     * Retrieves a list of databases
     * @param clusterId The unique ID of the cluster. (required)
     * @param limit The maximum number of elements to return. Use together with &#39;offset&#39; for pagination. (optional, default to 100)
     * @param offset The first element to return. Use together with &#39;limit&#39; for pagination. (optional, default to 0)
     * @return DatabaseList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance)  </td><td>  * Content-Type - application/problem+json <br>  </td></tr>
     </table>
     */
    public DatabaseList databasesList(String clusterId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DatabaseList> localVarResp = databasesListWithHttpInfo(clusterId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * List databases
     * Retrieves a list of databases
     * @param clusterId The unique ID of the cluster. (required)
     * @param limit The maximum number of elements to return. Use together with &#39;offset&#39; for pagination. (optional, default to 100)
     * @param offset The first element to return. Use together with &#39;limit&#39; for pagination. (optional, default to 0)
     * @return ApiResponse&lt;DatabaseList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance)  </td><td>  * Content-Type - application/problem+json <br>  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseList> databasesListWithHttpInfo(String clusterId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = databasesListValidateBeforeCall(clusterId, limit, offset, null);
        Type localVarReturnType = new TypeToken<DatabaseList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List databases (asynchronously)
     * Retrieves a list of databases
     * @param clusterId The unique ID of the cluster. (required)
     * @param limit The maximum number of elements to return. Use together with &#39;offset&#39; for pagination. (optional, default to 100)
     * @param offset The first element to return. Use together with &#39;limit&#39; for pagination. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance)  </td><td>  * Content-Type - application/problem+json <br>  </td></tr>
     </table>
     */
    public okhttp3.Call databasesListAsync(String clusterId, Integer limit, Integer offset, final ApiCallback<DatabaseList> _callback) throws ApiException {

        okhttp3.Call localVarCall = databasesListValidateBeforeCall(clusterId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DatabaseList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databasesPost
     * @param clusterId The unique ID of the cluster. (required)
     * @param database a database to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance)  </td><td>  * Content-Type - application/problem+json <br>  </td></tr>
     </table>
     */
    public okhttp3.Call databasesPostCall(String clusterId, Database database, final ApiCallback<DatabaseResource> _callback) throws ApiException {
        Object localVarPostBody = database;

        // create path and map variables
        String localVarPath = "/clusters/{clusterId}/databases"
            .replaceAll("\\{" + "clusterId" + "\\}", localVarApiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databasesPostValidateBeforeCall(String clusterId, Database database, final ApiCallback<DatabaseResource> _callback) throws ApiException {
        
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling databasesPost(Async)");
        }
        
        // verify the required parameter 'database' is set
        if (database == null) {
            throw new ApiException("Missing the required parameter 'database' when calling databasesPost(Async)");
        }
        

        okhttp3.Call localVarCall = databasesPostCall(clusterId, database, _callback);
        return localVarCall;

    }

    /**
     * Create a database
     * Create a new database
     * @param clusterId The unique ID of the cluster. (required)
     * @param database a database to create (required)
     * @return DatabaseResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance)  </td><td>  * Content-Type - application/problem+json <br>  </td></tr>
     </table>
     */
    public DatabaseResource databasesPost(String clusterId, Database database) throws ApiException {
        ApiResponse<DatabaseResource> localVarResp = databasesPostWithHttpInfo(clusterId, database);
        return localVarResp.getData();
    }

    /**
     * Create a database
     * Create a new database
     * @param clusterId The unique ID of the cluster. (required)
     * @param database a database to create (required)
     * @return ApiResponse&lt;DatabaseResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance)  </td><td>  * Content-Type - application/problem+json <br>  </td></tr>
     </table>
     */
    public ApiResponse<DatabaseResource> databasesPostWithHttpInfo(String clusterId, Database database) throws ApiException {
        okhttp3.Call localVarCall = databasesPostValidateBeforeCall(clusterId, database, null);
        Type localVarReturnType = new TypeToken<DatabaseResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a database (asynchronously)
     * Create a new database
     * @param clusterId The unique ID of the cluster. (required)
     * @param database a database to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance)  </td><td>  * Content-Type - application/problem+json <br>  </td></tr>
     </table>
     */
    public okhttp3.Call databasesPostAsync(String clusterId, Database database, final ApiCallback<DatabaseResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = databasesPostValidateBeforeCall(clusterId, database, _callback);
        Type localVarReturnType = new TypeToken<DatabaseResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
