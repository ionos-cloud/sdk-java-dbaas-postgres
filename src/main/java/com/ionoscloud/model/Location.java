/*
 * IONOS DBaaS REST API
 * An enterprise-grade Database is provided as a Service (DBaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.  The API allows you to create additional database clusters or modify existing ones. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The physical location where the cluster will be created. This will be where all of your instances live. Property cannot be modified after datacenter creation. 
 */
@JsonAdapter(Location.Adapter.class)
public enum Location {
  
  DE_FRA("de/fra"),
  
  DE_TXL("de/txl"),
  
  GB_LHR("gb/lhr"),
  
  ES_VIT("es/vit"),
  
  US_EWR("us/ewr"),
  
  US_LAS("us/las");

  private String value;

  Location(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Location fromValue(String value) {
    for (Location b : Location.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<Location> {
    @Override
    public void write(final JsonWriter jsonWriter, final Location enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Location read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Location.fromValue(value);
    }
  }
}

